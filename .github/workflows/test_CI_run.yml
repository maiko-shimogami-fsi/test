name: form-example 
on:
 #schedule:
 #   - cron: "0 20 * * *"
 workflow_dispatch:
    inputs:
      input_mod:
        description: 'Please enter the SHA-1 or branch name to UnitTest.'
        required: false
          
jobs:
    check-bats-version1:
      runs-on: windows-latest
      outputs:
       targetcompo:  ${{ steps.step2.outputs.targetcompo }}
      
      steps:
      #環境を設定する
        - name: step1
          uses: actions/checkout@v3
        - run: |
             echo "checkout"
             
      #チェック確認
        - name: step2
          id: step2
          run: |
             $targetcompo += "["
             foreach ($l in Get-Content ./unittest_setting.json) {
              if ($l -like "*node_name*") {
                $node_name = $l.Substring(22, ($l.Length-24))
               } elseif ($l -like "*scheduled*") {
                if ($l -like "*true*") {
                  $targetcompo += "`""
                  $targetcompo += $node_name
                  $targetcompo += "`""
                  $targetcompo += ","
                  }
                }
               }
             $targetcompo += "]"
             $targetcompo = $targetcompo -replace '\,]',']'
             echo "targetcompo=$targetcompo"
             echo "targetcompo=$targetcompo" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
            
    check-bats-version2:
      runs-on: ubuntu-latest
      needs: [ check-bats-version1 ]
      strategy:
       max-parallel: 2
       matrix:
         compolist: ${{fromJson( needs.check-bats-version1.outputs.targetcompo )}}
      
      steps:
      #チェック確認
        - name: step1
          id: step1
          run: |
             conv_compo=${{ matrix.compolist }}
             targetcompo=${{ needs.check-bats-version1.outputs.targetcompo }}
             echo "conv_compo=$conv_compo"
             echo "targetcompo=$targetcompo"
             
             if [ $conv_compo = 'Lcd' ]; then
              echo "エラー終了します"
              targetcompo="[Bsm]"
              echo "::set-output name=needs.check-bats-version1.outputs.targetcompo::$targetcompo"
              echo "targetcompo=${{ needs.check-bats-version1.outputs.targetcompo }}"
              #exit 1
             fi
 
        - name: step2
          if: always()
          run: |
             echo "job.status=${{ job.status }}" 
             if [ ${{ job.status }} = 'failure' ]; then
              echo "エラー"
             fi

    check-bats-version3:
      runs-on: ubuntu-latest
      needs: [ check-bats-version1,check-bats-version2 ]
      if: always()
      strategy:
       max-parallel: 2
       matrix:
         compolist: ${{fromJson( needs.check-bats-version1.outputs.targetcompo )}}
         
      steps:
      #チェック確認
        - name: step1
          uses: actions/checkout@v3
        - run: |
            conv_compo=${{ matrix.compolist }}
